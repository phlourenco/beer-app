//
//  BeerListInteractor.swift
//  uol-beer-app
//
//  Created by Paulo Lourenço on 11/04/19.
//  Copyright (c) 2019 Paulo Lourenço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

protocol BeerListBusinessLogic {
    func getBeerList(next: Bool)
    func getSections() -> [SectionBase]
    func selectBeer(index: Int)
}

protocol BeerListDataStore {
    var selectedBeer: Beer? { get set }
}

class BeerListInteractor: BeerListBusinessLogic, BeerListDataStore {
    
    // MARK: Clean Swift
    
    var presenter: BeerListPresentationLogic?
    var worker: BeerListWorker
    
    // MARK: Properties
    
    var beers: [Beer] = []
    var selectedBeer: Beer?
    var beersPerPage: Int = 20
    var canFetchMore: Bool = true
    
    // MARK: Methods
    
    init() {
        worker = BeerListWorker()
    }
    
    func getBeerList(next: Bool) {
        guard canFetchMore else { return }

        let page = next ? getNextPageNumber() : nil
        if !next {
            beers = []
        }
        
        worker.getBeers(page: page, itemsPerPage: beersPerPage)
            .done(handleBeerList)
            .catch(handleError)
    }
    
    private func handleBeerList(_ beers: [Beer]) {
        if beers.count > 0 {
            self.beers.append(contentsOf: beers)
            presenter?.presentBeers()
        } else {
            canFetchMore = false
        }
    }
    
    private func handleError(_ error: Error) {
        presenter?.presentError(error: error, tryAgainAction: nil)
    }
    
    func getSections() -> [SectionBase] {
        let beerSection = BeerSection(beers: beers)
        return [beerSection]
    }
    
    private func getNextPageNumber() -> Int {
        return (beers.count / beersPerPage) + 1
    }
    
    func selectBeer(index: Int) {
        selectedBeer = beers[index]
        presenter?.presentBeerDetails()
    }
    
}
