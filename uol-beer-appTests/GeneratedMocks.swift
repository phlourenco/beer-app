// MARK: - Mocks generated from file: uol-beer-app/Scenes/Details/BeerDetailsInteractor.swift at 2019-04-12 23:59:26 +0000

//
//  BeerDetailsInteractor.swift
//  uol-beer-app
//
//  Created by Paulo Lourenço on 11/04/19.
//  Copyright (c) 2019 Paulo Lourenço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import uol_beer_app

import UIKit


 class MockBeerDetailsBusinessLogic: BeerDetailsBusinessLogic, Cuckoo.ProtocolMock {
     typealias MocksType = BeerDetailsBusinessLogic
     typealias Stubbing = __StubbingProxy_BeerDetailsBusinessLogic
     typealias Verification = __VerificationProxy_BeerDetailsBusinessLogic

    private var __defaultImplStub: BeerDetailsBusinessLogic?

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

     func enableDefaultImplementation(_ stub: BeerDetailsBusinessLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }

    

    

    
    
    
     func getDetails()  {
        
            return cuckoo_manager.call("getDetails()",
                parameters: (),
                escapingParameters: (),
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.getDetails())
        
    }
    

	 struct __StubbingProxy_BeerDetailsBusinessLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func getDetails() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerDetailsBusinessLogic.self, method: "getDetails()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_BeerDetailsBusinessLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func getDetails() -> Cuckoo.__DoNotUse<Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("getDetails()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}

}

 class BeerDetailsBusinessLogicStub: BeerDetailsBusinessLogic {
    

    

    
     func getDetails()  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
}



 class MockBeerDetailsDataStore: BeerDetailsDataStore, Cuckoo.ProtocolMock {
     typealias MocksType = BeerDetailsDataStore
     typealias Stubbing = __StubbingProxy_BeerDetailsDataStore
     typealias Verification = __VerificationProxy_BeerDetailsDataStore

    private var __defaultImplStub: BeerDetailsDataStore?

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

     func enableDefaultImplementation(_ stub: BeerDetailsDataStore) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }

    
    
    
     var beer: Beer? {
        get {
            return cuckoo_manager.getter("beer",
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.beer)
        }
        
        set {
            cuckoo_manager.setter("beer",
                value: newValue,
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.beer = newValue)
        }
        
    }
    

    

    

	 struct __StubbingProxy_BeerDetailsDataStore: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    var beer: Cuckoo.ProtocolToBeStubbedProperty<MockBeerDetailsDataStore, Beer?> {
	        return .init(manager: cuckoo_manager, name: "beer")
	    }
	    
	    
	}

	 struct __VerificationProxy_BeerDetailsDataStore: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    var beer: Cuckoo.VerifyProperty<Beer?> {
	        return .init(manager: cuckoo_manager, name: "beer", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	}

}

 class BeerDetailsDataStoreStub: BeerDetailsDataStore {
    
     var beer: Beer? {
        get {
            return DefaultValueRegistry.defaultValue(for: (Beer?).self)
        }
        
        set { }
        
    }
    

    

    
}



 class MockBeerDetailsInteractor: BeerDetailsInteractor, Cuckoo.ClassMock {
     typealias MocksType = BeerDetailsInteractor
     typealias Stubbing = __StubbingProxy_BeerDetailsInteractor
     typealias Verification = __VerificationProxy_BeerDetailsInteractor

    private var __defaultImplStub: BeerDetailsInteractor?

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

     func enableDefaultImplementation(_ stub: BeerDetailsInteractor) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }

    
    
    
     override var presenter: BeerDetailsPresentationLogic? {
        get {
            return cuckoo_manager.getter("presenter",
                superclassCall:
                    
                    super.presenter
                    ,
                defaultCall: __defaultImplStub!.presenter)
        }
        
        set {
            cuckoo_manager.setter("presenter",
                value: newValue,
                superclassCall:
                    
                    super.presenter = newValue
                    ,
                defaultCall: __defaultImplStub!.presenter = newValue)
        }
        
    }
    
    
    
     override var worker: BeerDetailsWorker? {
        get {
            return cuckoo_manager.getter("worker",
                superclassCall:
                    
                    super.worker
                    ,
                defaultCall: __defaultImplStub!.worker)
        }
        
        set {
            cuckoo_manager.setter("worker",
                value: newValue,
                superclassCall:
                    
                    super.worker = newValue
                    ,
                defaultCall: __defaultImplStub!.worker = newValue)
        }
        
    }
    
    
    
     override var beer: Beer? {
        get {
            return cuckoo_manager.getter("beer",
                superclassCall:
                    
                    super.beer
                    ,
                defaultCall: __defaultImplStub!.beer)
        }
        
        set {
            cuckoo_manager.setter("beer",
                value: newValue,
                superclassCall:
                    
                    super.beer = newValue
                    ,
                defaultCall: __defaultImplStub!.beer = newValue)
        }
        
    }
    

    

    
    
    
     override func getDetails()  {
        
            return cuckoo_manager.call("getDetails()",
                parameters: (),
                escapingParameters: (),
                superclassCall:
                    
                    super.getDetails()
                    ,
                defaultCall: __defaultImplStub!.getDetails())
        
    }
    

	 struct __StubbingProxy_BeerDetailsInteractor: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    var presenter: Cuckoo.ClassToBeStubbedProperty<MockBeerDetailsInteractor, BeerDetailsPresentationLogic?> {
	        return .init(manager: cuckoo_manager, name: "presenter")
	    }
	    
	    var worker: Cuckoo.ClassToBeStubbedProperty<MockBeerDetailsInteractor, BeerDetailsWorker?> {
	        return .init(manager: cuckoo_manager, name: "worker")
	    }
	    
	    var beer: Cuckoo.ClassToBeStubbedProperty<MockBeerDetailsInteractor, Beer?> {
	        return .init(manager: cuckoo_manager, name: "beer")
	    }
	    
	    
	    func getDetails() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerDetailsInteractor.self, method: "getDetails()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_BeerDetailsInteractor: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    var presenter: Cuckoo.VerifyProperty<BeerDetailsPresentationLogic?> {
	        return .init(manager: cuckoo_manager, name: "presenter", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    var worker: Cuckoo.VerifyProperty<BeerDetailsWorker?> {
	        return .init(manager: cuckoo_manager, name: "worker", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    var beer: Cuckoo.VerifyProperty<Beer?> {
	        return .init(manager: cuckoo_manager, name: "beer", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func getDetails() -> Cuckoo.__DoNotUse<Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("getDetails()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}

}

 class BeerDetailsInteractorStub: BeerDetailsInteractor {
    
     override var presenter: BeerDetailsPresentationLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (BeerDetailsPresentationLogic?).self)
        }
        
        set { }
        
    }
    
     override var worker: BeerDetailsWorker? {
        get {
            return DefaultValueRegistry.defaultValue(for: (BeerDetailsWorker?).self)
        }
        
        set { }
        
    }
    
     override var beer: Beer? {
        get {
            return DefaultValueRegistry.defaultValue(for: (Beer?).self)
        }
        
        set { }
        
    }
    

    

    
     override func getDetails()  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
}


// MARK: - Mocks generated from file: uol-beer-app/Scenes/Details/BeerDetailsPresenter.swift at 2019-04-12 23:59:26 +0000

//
//  BeerDetailsPresenter.swift
//  uol-beer-app
//
//  Created by Paulo Lourenço on 11/04/19.
//  Copyright (c) 2019 Paulo Lourenço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import uol_beer_app

import UIKit


 class MockBeerDetailsPresentationLogic: BeerDetailsPresentationLogic, Cuckoo.ProtocolMock {
     typealias MocksType = BeerDetailsPresentationLogic
     typealias Stubbing = __StubbingProxy_BeerDetailsPresentationLogic
     typealias Verification = __VerificationProxy_BeerDetailsPresentationLogic

    private var __defaultImplStub: BeerDetailsPresentationLogic?

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

     func enableDefaultImplementation(_ stub: BeerDetailsPresentationLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }

    

    

    
    
    
     func presentDetails(response: BeerDetails.Response)  {
        
            return cuckoo_manager.call("presentDetails(response: BeerDetails.Response)",
                parameters: (response),
                escapingParameters: (response),
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.presentDetails(response: response))
        
    }
    

	 struct __StubbingProxy_BeerDetailsPresentationLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func presentDetails<M1: Cuckoo.Matchable>(response: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(BeerDetails.Response)> where M1.MatchedType == BeerDetails.Response {
	        let matchers: [Cuckoo.ParameterMatcher<(BeerDetails.Response)>] = [wrap(matchable: response) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerDetailsPresentationLogic.self, method: "presentDetails(response: BeerDetails.Response)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_BeerDetailsPresentationLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func presentDetails<M1: Cuckoo.Matchable>(response: M1) -> Cuckoo.__DoNotUse<Void> where M1.MatchedType == BeerDetails.Response {
	        let matchers: [Cuckoo.ParameterMatcher<(BeerDetails.Response)>] = [wrap(matchable: response) { $0 }]
	        return cuckoo_manager.verify("presentDetails(response: BeerDetails.Response)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}

}

 class BeerDetailsPresentationLogicStub: BeerDetailsPresentationLogic {
    

    

    
     func presentDetails(response: BeerDetails.Response)  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
}



 class MockBeerDetailsPresenter: BeerDetailsPresenter, Cuckoo.ClassMock {
     typealias MocksType = BeerDetailsPresenter
     typealias Stubbing = __StubbingProxy_BeerDetailsPresenter
     typealias Verification = __VerificationProxy_BeerDetailsPresenter

    private var __defaultImplStub: BeerDetailsPresenter?

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

     func enableDefaultImplementation(_ stub: BeerDetailsPresenter) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }

    
    
    
     override var viewController: BeerDetailsDisplayLogic? {
        get {
            return cuckoo_manager.getter("viewController",
                superclassCall:
                    
                    super.viewController
                    ,
                defaultCall: __defaultImplStub!.viewController)
        }
        
        set {
            cuckoo_manager.setter("viewController",
                value: newValue,
                superclassCall:
                    
                    super.viewController = newValue
                    ,
                defaultCall: __defaultImplStub!.viewController = newValue)
        }
        
    }
    

    

    
    
    
     override func presentDetails(response: BeerDetails.Response)  {
        
            return cuckoo_manager.call("presentDetails(response: BeerDetails.Response)",
                parameters: (response),
                escapingParameters: (response),
                superclassCall:
                    
                    super.presentDetails(response: response)
                    ,
                defaultCall: __defaultImplStub!.presentDetails(response: response))
        
    }
    

	 struct __StubbingProxy_BeerDetailsPresenter: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    var viewController: Cuckoo.ClassToBeStubbedProperty<MockBeerDetailsPresenter, BeerDetailsDisplayLogic?> {
	        return .init(manager: cuckoo_manager, name: "viewController")
	    }
	    
	    
	    func presentDetails<M1: Cuckoo.Matchable>(response: M1) -> Cuckoo.ClassStubNoReturnFunction<(BeerDetails.Response)> where M1.MatchedType == BeerDetails.Response {
	        let matchers: [Cuckoo.ParameterMatcher<(BeerDetails.Response)>] = [wrap(matchable: response) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerDetailsPresenter.self, method: "presentDetails(response: BeerDetails.Response)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_BeerDetailsPresenter: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    var viewController: Cuckoo.VerifyProperty<BeerDetailsDisplayLogic?> {
	        return .init(manager: cuckoo_manager, name: "viewController", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func presentDetails<M1: Cuckoo.Matchable>(response: M1) -> Cuckoo.__DoNotUse<Void> where M1.MatchedType == BeerDetails.Response {
	        let matchers: [Cuckoo.ParameterMatcher<(BeerDetails.Response)>] = [wrap(matchable: response) { $0 }]
	        return cuckoo_manager.verify("presentDetails(response: BeerDetails.Response)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}

}

 class BeerDetailsPresenterStub: BeerDetailsPresenter {
    
     override var viewController: BeerDetailsDisplayLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (BeerDetailsDisplayLogic?).self)
        }
        
        set { }
        
    }
    

    

    
     override func presentDetails(response: BeerDetails.Response)  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
}


// MARK: - Mocks generated from file: uol-beer-app/Scenes/Details/BeerDetailsViewController.swift at 2019-04-12 23:59:26 +0000

//
//  BeerDetailsViewController.swift
//  uol-beer-app
//
//  Created by Paulo Lourenço on 11/04/19.
//  Copyright (c) 2019 Paulo Lourenço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import uol_beer_app

import SDWebImage
import UIKit


 class MockBeerDetailsDisplayLogic: BeerDetailsDisplayLogic, Cuckoo.ProtocolMock {
     typealias MocksType = BeerDetailsDisplayLogic
     typealias Stubbing = __StubbingProxy_BeerDetailsDisplayLogic
     typealias Verification = __VerificationProxy_BeerDetailsDisplayLogic

    private var __defaultImplStub: BeerDetailsDisplayLogic?

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

     func enableDefaultImplementation(_ stub: BeerDetailsDisplayLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }

    

    

    
    
    
     func displayDetails(viewModel: BeerDetails.ViewModel)  {
        
            return cuckoo_manager.call("displayDetails(viewModel: BeerDetails.ViewModel)",
                parameters: (viewModel),
                escapingParameters: (viewModel),
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.displayDetails(viewModel: viewModel))
        
    }
    

	 struct __StubbingProxy_BeerDetailsDisplayLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func displayDetails<M1: Cuckoo.Matchable>(viewModel: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(BeerDetails.ViewModel)> where M1.MatchedType == BeerDetails.ViewModel {
	        let matchers: [Cuckoo.ParameterMatcher<(BeerDetails.ViewModel)>] = [wrap(matchable: viewModel) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerDetailsDisplayLogic.self, method: "displayDetails(viewModel: BeerDetails.ViewModel)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_BeerDetailsDisplayLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func displayDetails<M1: Cuckoo.Matchable>(viewModel: M1) -> Cuckoo.__DoNotUse<Void> where M1.MatchedType == BeerDetails.ViewModel {
	        let matchers: [Cuckoo.ParameterMatcher<(BeerDetails.ViewModel)>] = [wrap(matchable: viewModel) { $0 }]
	        return cuckoo_manager.verify("displayDetails(viewModel: BeerDetails.ViewModel)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}

}

 class BeerDetailsDisplayLogicStub: BeerDetailsDisplayLogic {
    

    

    
     func displayDetails(viewModel: BeerDetails.ViewModel)  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
}



 class MockBeerDetailsViewController: BeerDetailsViewController, Cuckoo.ClassMock {
     typealias MocksType = BeerDetailsViewController
     typealias Stubbing = __StubbingProxy_BeerDetailsViewController
     typealias Verification = __VerificationProxy_BeerDetailsViewController

    private var __defaultImplStub: BeerDetailsViewController?

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

     func enableDefaultImplementation(_ stub: BeerDetailsViewController) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }

    
    
    
     override var interactor: BeerDetailsBusinessLogic? {
        get {
            return cuckoo_manager.getter("interactor",
                superclassCall:
                    
                    super.interactor
                    ,
                defaultCall: __defaultImplStub!.interactor)
        }
        
        set {
            cuckoo_manager.setter("interactor",
                value: newValue,
                superclassCall:
                    
                    super.interactor = newValue
                    ,
                defaultCall: __defaultImplStub!.interactor = newValue)
        }
        
    }
    
    
    
     override var router: (NSObjectProtocol & BeerDetailsDataPassing)? {
        get {
            return cuckoo_manager.getter("router",
                superclassCall:
                    
                    super.router
                    ,
                defaultCall: __defaultImplStub!.router)
        }
        
        set {
            cuckoo_manager.setter("router",
                value: newValue,
                superclassCall:
                    
                    super.router = newValue
                    ,
                defaultCall: __defaultImplStub!.router = newValue)
        }
        
    }
    
    
    
     override var imageView: UIImageView! {
        get {
            return cuckoo_manager.getter("imageView",
                superclassCall:
                    
                    super.imageView
                    ,
                defaultCall: __defaultImplStub!.imageView)
        }
        
        set {
            cuckoo_manager.setter("imageView",
                value: newValue,
                superclassCall:
                    
                    super.imageView = newValue
                    ,
                defaultCall: __defaultImplStub!.imageView = newValue)
        }
        
    }
    
    
    
     override var taglineLabel: UILabel! {
        get {
            return cuckoo_manager.getter("taglineLabel",
                superclassCall:
                    
                    super.taglineLabel
                    ,
                defaultCall: __defaultImplStub!.taglineLabel)
        }
        
        set {
            cuckoo_manager.setter("taglineLabel",
                value: newValue,
                superclassCall:
                    
                    super.taglineLabel = newValue
                    ,
                defaultCall: __defaultImplStub!.taglineLabel = newValue)
        }
        
    }
    
    
    
     override var detailsLabel: UILabel! {
        get {
            return cuckoo_manager.getter("detailsLabel",
                superclassCall:
                    
                    super.detailsLabel
                    ,
                defaultCall: __defaultImplStub!.detailsLabel)
        }
        
        set {
            cuckoo_manager.setter("detailsLabel",
                value: newValue,
                superclassCall:
                    
                    super.detailsLabel = newValue
                    ,
                defaultCall: __defaultImplStub!.detailsLabel = newValue)
        }
        
    }
    

    

    
    
    
     override func viewDidLoad()  {
        
            return cuckoo_manager.call("viewDidLoad()",
                parameters: (),
                escapingParameters: (),
                superclassCall:
                    
                    super.viewDidLoad()
                    ,
                defaultCall: __defaultImplStub!.viewDidLoad())
        
    }
    

	 struct __StubbingProxy_BeerDetailsViewController: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    var interactor: Cuckoo.ClassToBeStubbedProperty<MockBeerDetailsViewController, BeerDetailsBusinessLogic?> {
	        return .init(manager: cuckoo_manager, name: "interactor")
	    }
	    
	    var router: Cuckoo.ClassToBeStubbedProperty<MockBeerDetailsViewController, (NSObjectProtocol & BeerDetailsDataPassing)?> {
	        return .init(manager: cuckoo_manager, name: "router")
	    }
	    
	    var imageView: Cuckoo.ClassToBeStubbedProperty<MockBeerDetailsViewController, UIImageView?> {
	        return .init(manager: cuckoo_manager, name: "imageView")
	    }
	    
	    var taglineLabel: Cuckoo.ClassToBeStubbedProperty<MockBeerDetailsViewController, UILabel?> {
	        return .init(manager: cuckoo_manager, name: "taglineLabel")
	    }
	    
	    var detailsLabel: Cuckoo.ClassToBeStubbedProperty<MockBeerDetailsViewController, UILabel?> {
	        return .init(manager: cuckoo_manager, name: "detailsLabel")
	    }
	    
	    
	    func viewDidLoad() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerDetailsViewController.self, method: "viewDidLoad()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_BeerDetailsViewController: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    var interactor: Cuckoo.VerifyProperty<BeerDetailsBusinessLogic?> {
	        return .init(manager: cuckoo_manager, name: "interactor", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    var router: Cuckoo.VerifyProperty<(NSObjectProtocol & BeerDetailsDataPassing)?> {
	        return .init(manager: cuckoo_manager, name: "router", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    var imageView: Cuckoo.VerifyProperty<UIImageView?> {
	        return .init(manager: cuckoo_manager, name: "imageView", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    var taglineLabel: Cuckoo.VerifyProperty<UILabel?> {
	        return .init(manager: cuckoo_manager, name: "taglineLabel", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    var detailsLabel: Cuckoo.VerifyProperty<UILabel?> {
	        return .init(manager: cuckoo_manager, name: "detailsLabel", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func viewDidLoad() -> Cuckoo.__DoNotUse<Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("viewDidLoad()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}

}

 class BeerDetailsViewControllerStub: BeerDetailsViewController {
    
     override var interactor: BeerDetailsBusinessLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (BeerDetailsBusinessLogic?).self)
        }
        
        set { }
        
    }
    
     override var router: (NSObjectProtocol & BeerDetailsDataPassing)? {
        get {
            return DefaultValueRegistry.defaultValue(for: ((NSObjectProtocol & BeerDetailsDataPassing)?).self)
        }
        
        set { }
        
    }
    
     override var imageView: UIImageView! {
        get {
            return DefaultValueRegistry.defaultValue(for: (UIImageView?).self)
        }
        
        set { }
        
    }
    
     override var taglineLabel: UILabel! {
        get {
            return DefaultValueRegistry.defaultValue(for: (UILabel?).self)
        }
        
        set { }
        
    }
    
     override var detailsLabel: UILabel! {
        get {
            return DefaultValueRegistry.defaultValue(for: (UILabel?).self)
        }
        
        set { }
        
    }
    

    

    
     override func viewDidLoad()  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
}


// MARK: - Mocks generated from file: uol-beer-app/Scenes/Details/BeerDetailsWorker.swift at 2019-04-12 23:59:26 +0000

//
//  BeerDetailsWorker.swift
//  uol-beer-app
//
//  Created by Paulo Lourenço on 11/04/19.
//  Copyright (c) 2019 Paulo Lourenço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import uol_beer_app

import UIKit


 class MockBeerDetailsWorker: BeerDetailsWorker, Cuckoo.ClassMock {
     typealias MocksType = BeerDetailsWorker
     typealias Stubbing = __StubbingProxy_BeerDetailsWorker
     typealias Verification = __VerificationProxy_BeerDetailsWorker

    private var __defaultImplStub: BeerDetailsWorker?

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

     func enableDefaultImplementation(_ stub: BeerDetailsWorker) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }

    

    

    
    
    
     override func doSomeWork()  {
        
            return cuckoo_manager.call("doSomeWork()",
                parameters: (),
                escapingParameters: (),
                superclassCall:
                    
                    super.doSomeWork()
                    ,
                defaultCall: __defaultImplStub!.doSomeWork())
        
    }
    

	 struct __StubbingProxy_BeerDetailsWorker: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func doSomeWork() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerDetailsWorker.self, method: "doSomeWork()", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_BeerDetailsWorker: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func doSomeWork() -> Cuckoo.__DoNotUse<Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("doSomeWork()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}

}

 class BeerDetailsWorkerStub: BeerDetailsWorker {
    

    

    
     override func doSomeWork()  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
}


// MARK: - Mocks generated from file: uol-beer-app/Scenes/List/BeerListInteractor.swift at 2019-04-12 23:59:26 +0000

//
//  BeerListInteractor.swift
//  uol-beer-app
//
//  Created by Paulo Lourenço on 11/04/19.
//  Copyright (c) 2019 Paulo Lourenço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import uol_beer_app

import Foundation


 class MockBeerListBusinessLogic: BeerListBusinessLogic, Cuckoo.ProtocolMock {
     typealias MocksType = BeerListBusinessLogic
     typealias Stubbing = __StubbingProxy_BeerListBusinessLogic
     typealias Verification = __VerificationProxy_BeerListBusinessLogic

    private var __defaultImplStub: BeerListBusinessLogic?

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

     func enableDefaultImplementation(_ stub: BeerListBusinessLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }

    

    

    
    
    
     func getBeerList(next: Bool)  {
        
            return cuckoo_manager.call("getBeerList(next: Bool)",
                parameters: (next),
                escapingParameters: (next),
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.getBeerList(next: next))
        
    }
    
    
    
     func getSections()  -> [SectionBase] {
        
            return cuckoo_manager.call("getSections() -> [SectionBase]",
                parameters: (),
                escapingParameters: (),
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.getSections())
        
    }
    
    
    
     func selectBeer(index: Int)  {
        
            return cuckoo_manager.call("selectBeer(index: Int)",
                parameters: (index),
                escapingParameters: (index),
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.selectBeer(index: index))
        
    }
    

	 struct __StubbingProxy_BeerListBusinessLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func getBeerList<M1: Cuckoo.Matchable>(next: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(Bool)> where M1.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool)>] = [wrap(matchable: next) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerListBusinessLogic.self, method: "getBeerList(next: Bool)", parameterMatchers: matchers))
	    }
	    
	    func getSections() -> Cuckoo.ProtocolStubFunction<(), [SectionBase]> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerListBusinessLogic.self, method: "getSections() -> [SectionBase]", parameterMatchers: matchers))
	    }
	    
	    func selectBeer<M1: Cuckoo.Matchable>(index: M1) -> Cuckoo.ProtocolStubNoReturnFunction<(Int)> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerListBusinessLogic.self, method: "selectBeer(index: Int)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_BeerListBusinessLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func getBeerList<M1: Cuckoo.Matchable>(next: M1) -> Cuckoo.__DoNotUse<Void> where M1.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool)>] = [wrap(matchable: next) { $0 }]
	        return cuckoo_manager.verify("getBeerList(next: Bool)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func getSections() -> Cuckoo.__DoNotUse<[SectionBase]> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("getSections() -> [SectionBase]", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func selectBeer<M1: Cuckoo.Matchable>(index: M1) -> Cuckoo.__DoNotUse<Void> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return cuckoo_manager.verify("selectBeer(index: Int)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}

}

 class BeerListBusinessLogicStub: BeerListBusinessLogic {
    

    

    
     func getBeerList(next: Bool)  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
     func getSections()  -> [SectionBase] {
        return DefaultValueRegistry.defaultValue(for: [SectionBase].self)
    }
    
     func selectBeer(index: Int)  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
}



 class MockBeerListDataStore: BeerListDataStore, Cuckoo.ProtocolMock {
     typealias MocksType = BeerListDataStore
     typealias Stubbing = __StubbingProxy_BeerListDataStore
     typealias Verification = __VerificationProxy_BeerListDataStore

    private var __defaultImplStub: BeerListDataStore?

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

     func enableDefaultImplementation(_ stub: BeerListDataStore) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }

    
    
    
     var selectedBeer: Beer? {
        get {
            return cuckoo_manager.getter("selectedBeer",
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.selectedBeer)
        }
        
        set {
            cuckoo_manager.setter("selectedBeer",
                value: newValue,
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.selectedBeer = newValue)
        }
        
    }
    

    

    

	 struct __StubbingProxy_BeerListDataStore: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    var selectedBeer: Cuckoo.ProtocolToBeStubbedProperty<MockBeerListDataStore, Beer?> {
	        return .init(manager: cuckoo_manager, name: "selectedBeer")
	    }
	    
	    
	}

	 struct __VerificationProxy_BeerListDataStore: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    var selectedBeer: Cuckoo.VerifyProperty<Beer?> {
	        return .init(manager: cuckoo_manager, name: "selectedBeer", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	}

}

 class BeerListDataStoreStub: BeerListDataStore {
    
     var selectedBeer: Beer? {
        get {
            return DefaultValueRegistry.defaultValue(for: (Beer?).self)
        }
        
        set { }
        
    }
    

    

    
}



 class MockBeerListInteractor: BeerListInteractor, Cuckoo.ClassMock {
     typealias MocksType = BeerListInteractor
     typealias Stubbing = __StubbingProxy_BeerListInteractor
     typealias Verification = __VerificationProxy_BeerListInteractor

    private var __defaultImplStub: BeerListInteractor?

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

     func enableDefaultImplementation(_ stub: BeerListInteractor) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }

    
    
    
     override var presenter: BeerListPresentationLogic? {
        get {
            return cuckoo_manager.getter("presenter",
                superclassCall:
                    
                    super.presenter
                    ,
                defaultCall: __defaultImplStub!.presenter)
        }
        
        set {
            cuckoo_manager.setter("presenter",
                value: newValue,
                superclassCall:
                    
                    super.presenter = newValue
                    ,
                defaultCall: __defaultImplStub!.presenter = newValue)
        }
        
    }
    
    
    
     override var worker: BeerListWorker {
        get {
            return cuckoo_manager.getter("worker",
                superclassCall:
                    
                    super.worker
                    ,
                defaultCall: __defaultImplStub!.worker)
        }
        
        set {
            cuckoo_manager.setter("worker",
                value: newValue,
                superclassCall:
                    
                    super.worker = newValue
                    ,
                defaultCall: __defaultImplStub!.worker = newValue)
        }
        
    }
    
    
    
     override var beers: [Beer] {
        get {
            return cuckoo_manager.getter("beers",
                superclassCall:
                    
                    super.beers
                    ,
                defaultCall: __defaultImplStub!.beers)
        }
        
        set {
            cuckoo_manager.setter("beers",
                value: newValue,
                superclassCall:
                    
                    super.beers = newValue
                    ,
                defaultCall: __defaultImplStub!.beers = newValue)
        }
        
    }
    
    
    
     override var selectedBeer: Beer? {
        get {
            return cuckoo_manager.getter("selectedBeer",
                superclassCall:
                    
                    super.selectedBeer
                    ,
                defaultCall: __defaultImplStub!.selectedBeer)
        }
        
        set {
            cuckoo_manager.setter("selectedBeer",
                value: newValue,
                superclassCall:
                    
                    super.selectedBeer = newValue
                    ,
                defaultCall: __defaultImplStub!.selectedBeer = newValue)
        }
        
    }
    
    
    
     override var beersPerPage: Int {
        get {
            return cuckoo_manager.getter("beersPerPage",
                superclassCall:
                    
                    super.beersPerPage
                    ,
                defaultCall: __defaultImplStub!.beersPerPage)
        }
        
        set {
            cuckoo_manager.setter("beersPerPage",
                value: newValue,
                superclassCall:
                    
                    super.beersPerPage = newValue
                    ,
                defaultCall: __defaultImplStub!.beersPerPage = newValue)
        }
        
    }
    
    
    
     override var canFetchMore: Bool {
        get {
            return cuckoo_manager.getter("canFetchMore",
                superclassCall:
                    
                    super.canFetchMore
                    ,
                defaultCall: __defaultImplStub!.canFetchMore)
        }
        
        set {
            cuckoo_manager.setter("canFetchMore",
                value: newValue,
                superclassCall:
                    
                    super.canFetchMore = newValue
                    ,
                defaultCall: __defaultImplStub!.canFetchMore = newValue)
        }
        
    }
    

    

    
    
    
     override func getBeerList(next: Bool)  {
        
            return cuckoo_manager.call("getBeerList(next: Bool)",
                parameters: (next),
                escapingParameters: (next),
                superclassCall:
                    
                    super.getBeerList(next: next)
                    ,
                defaultCall: __defaultImplStub!.getBeerList(next: next))
        
    }
    
    
    
     override func getSections()  -> [SectionBase] {
        
            return cuckoo_manager.call("getSections() -> [SectionBase]",
                parameters: (),
                escapingParameters: (),
                superclassCall:
                    
                    super.getSections()
                    ,
                defaultCall: __defaultImplStub!.getSections())
        
    }
    
    
    
     override func selectBeer(index: Int)  {
        
            return cuckoo_manager.call("selectBeer(index: Int)",
                parameters: (index),
                escapingParameters: (index),
                superclassCall:
                    
                    super.selectBeer(index: index)
                    ,
                defaultCall: __defaultImplStub!.selectBeer(index: index))
        
    }
    

	 struct __StubbingProxy_BeerListInteractor: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    var presenter: Cuckoo.ClassToBeStubbedProperty<MockBeerListInteractor, BeerListPresentationLogic?> {
	        return .init(manager: cuckoo_manager, name: "presenter")
	    }
	    
	    var worker: Cuckoo.ClassToBeStubbedProperty<MockBeerListInteractor, BeerListWorker> {
	        return .init(manager: cuckoo_manager, name: "worker")
	    }
	    
	    var beers: Cuckoo.ClassToBeStubbedProperty<MockBeerListInteractor, [Beer]> {
	        return .init(manager: cuckoo_manager, name: "beers")
	    }
	    
	    var selectedBeer: Cuckoo.ClassToBeStubbedProperty<MockBeerListInteractor, Beer?> {
	        return .init(manager: cuckoo_manager, name: "selectedBeer")
	    }
	    
	    var beersPerPage: Cuckoo.ClassToBeStubbedProperty<MockBeerListInteractor, Int> {
	        return .init(manager: cuckoo_manager, name: "beersPerPage")
	    }
	    
	    var canFetchMore: Cuckoo.ClassToBeStubbedProperty<MockBeerListInteractor, Bool> {
	        return .init(manager: cuckoo_manager, name: "canFetchMore")
	    }
	    
	    
	    func getBeerList<M1: Cuckoo.Matchable>(next: M1) -> Cuckoo.ClassStubNoReturnFunction<(Bool)> where M1.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool)>] = [wrap(matchable: next) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerListInteractor.self, method: "getBeerList(next: Bool)", parameterMatchers: matchers))
	    }
	    
	    func getSections() -> Cuckoo.ClassStubFunction<(), [SectionBase]> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerListInteractor.self, method: "getSections() -> [SectionBase]", parameterMatchers: matchers))
	    }
	    
	    func selectBeer<M1: Cuckoo.Matchable>(index: M1) -> Cuckoo.ClassStubNoReturnFunction<(Int)> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerListInteractor.self, method: "selectBeer(index: Int)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_BeerListInteractor: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    var presenter: Cuckoo.VerifyProperty<BeerListPresentationLogic?> {
	        return .init(manager: cuckoo_manager, name: "presenter", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    var worker: Cuckoo.VerifyProperty<BeerListWorker> {
	        return .init(manager: cuckoo_manager, name: "worker", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    var beers: Cuckoo.VerifyProperty<[Beer]> {
	        return .init(manager: cuckoo_manager, name: "beers", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    var selectedBeer: Cuckoo.VerifyProperty<Beer?> {
	        return .init(manager: cuckoo_manager, name: "selectedBeer", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    var beersPerPage: Cuckoo.VerifyProperty<Int> {
	        return .init(manager: cuckoo_manager, name: "beersPerPage", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	    var canFetchMore: Cuckoo.VerifyProperty<Bool> {
	        return .init(manager: cuckoo_manager, name: "canFetchMore", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func getBeerList<M1: Cuckoo.Matchable>(next: M1) -> Cuckoo.__DoNotUse<Void> where M1.MatchedType == Bool {
	        let matchers: [Cuckoo.ParameterMatcher<(Bool)>] = [wrap(matchable: next) { $0 }]
	        return cuckoo_manager.verify("getBeerList(next: Bool)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func getSections() -> Cuckoo.__DoNotUse<[SectionBase]> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("getSections() -> [SectionBase]", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func selectBeer<M1: Cuckoo.Matchable>(index: M1) -> Cuckoo.__DoNotUse<Void> where M1.MatchedType == Int {
	        let matchers: [Cuckoo.ParameterMatcher<(Int)>] = [wrap(matchable: index) { $0 }]
	        return cuckoo_manager.verify("selectBeer(index: Int)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}

}

 class BeerListInteractorStub: BeerListInteractor {
    
     override var presenter: BeerListPresentationLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (BeerListPresentationLogic?).self)
        }
        
        set { }
        
    }
    
     override var worker: BeerListWorker {
        get {
            return DefaultValueRegistry.defaultValue(for: (BeerListWorker).self)
        }
        
        set { }
        
    }
    
     override var beers: [Beer] {
        get {
            return DefaultValueRegistry.defaultValue(for: ([Beer]).self)
        }
        
        set { }
        
    }
    
     override var selectedBeer: Beer? {
        get {
            return DefaultValueRegistry.defaultValue(for: (Beer?).self)
        }
        
        set { }
        
    }
    
     override var beersPerPage: Int {
        get {
            return DefaultValueRegistry.defaultValue(for: (Int).self)
        }
        
        set { }
        
    }
    
     override var canFetchMore: Bool {
        get {
            return DefaultValueRegistry.defaultValue(for: (Bool).self)
        }
        
        set { }
        
    }
    

    

    
     override func getBeerList(next: Bool)  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
     override func getSections()  -> [SectionBase] {
        return DefaultValueRegistry.defaultValue(for: [SectionBase].self)
    }
    
     override func selectBeer(index: Int)  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
}


// MARK: - Mocks generated from file: uol-beer-app/Scenes/List/BeerListPresenter.swift at 2019-04-12 23:59:26 +0000

//
//  BeerListPresenter.swift
//  uol-beer-app
//
//  Created by Paulo Lourenço on 11/04/19.
//  Copyright (c) 2019 Paulo Lourenço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import uol_beer_app

import UIKit


 class MockBeerListPresentationLogic: BeerListPresentationLogic, Cuckoo.ProtocolMock {
     typealias MocksType = BeerListPresentationLogic
     typealias Stubbing = __StubbingProxy_BeerListPresentationLogic
     typealias Verification = __VerificationProxy_BeerListPresentationLogic

    private var __defaultImplStub: BeerListPresentationLogic?

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: false)

     func enableDefaultImplementation(_ stub: BeerListPresentationLogic) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }

    

    

    
    
    
     func presentBeers()  {
        
            return cuckoo_manager.call("presentBeers()",
                parameters: (),
                escapingParameters: (),
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.presentBeers())
        
    }
    
    
    
     func presentBeerDetails()  {
        
            return cuckoo_manager.call("presentBeerDetails()",
                parameters: (),
                escapingParameters: (),
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.presentBeerDetails())
        
    }
    
    
    
     func presentError(error: Error, tryAgainAction: (()->())?)  {
        
            return cuckoo_manager.call("presentError(error: Error, tryAgainAction: (()->())?)",
                parameters: (error, tryAgainAction),
                escapingParameters: (error, tryAgainAction),
                superclassCall:
                    
                    Cuckoo.MockManager.crashOnProtocolSuperclassCall()
                    ,
                defaultCall: __defaultImplStub!.presentError(error: error, tryAgainAction: tryAgainAction))
        
    }
    

	 struct __StubbingProxy_BeerListPresentationLogic: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    
	    func presentBeers() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerListPresentationLogic.self, method: "presentBeers()", parameterMatchers: matchers))
	    }
	    
	    func presentBeerDetails() -> Cuckoo.ProtocolStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerListPresentationLogic.self, method: "presentBeerDetails()", parameterMatchers: matchers))
	    }
	    
	    func presentError<M1: Cuckoo.Matchable, M2: Cuckoo.Matchable>(error: M1, tryAgainAction: M2) -> Cuckoo.ProtocolStubNoReturnFunction<(Error, (()->())?)> where M1.MatchedType == Error, M2.MatchedType == (()->())? {
	        let matchers: [Cuckoo.ParameterMatcher<(Error, (()->())?)>] = [wrap(matchable: error) { $0.0 }, wrap(matchable: tryAgainAction) { $0.1 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerListPresentationLogic.self, method: "presentError(error: Error, tryAgainAction: (()->())?)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_BeerListPresentationLogic: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	
	    
	    @discardableResult
	    func presentBeers() -> Cuckoo.__DoNotUse<Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentBeers()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentBeerDetails() -> Cuckoo.__DoNotUse<Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentBeerDetails()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentError<M1: Cuckoo.Matchable, M2: Cuckoo.Matchable>(error: M1, tryAgainAction: M2) -> Cuckoo.__DoNotUse<Void> where M1.MatchedType == Error, M2.MatchedType == (()->())? {
	        let matchers: [Cuckoo.ParameterMatcher<(Error, (()->())?)>] = [wrap(matchable: error) { $0.0 }, wrap(matchable: tryAgainAction) { $0.1 }]
	        return cuckoo_manager.verify("presentError(error: Error, tryAgainAction: (()->())?)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}

}

 class BeerListPresentationLogicStub: BeerListPresentationLogic {
    

    

    
     func presentBeers()  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
     func presentBeerDetails()  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
     func presentError(error: Error, tryAgainAction: (()->())?)  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
}



 class MockBeerListPresenter: BeerListPresenter, Cuckoo.ClassMock {
     typealias MocksType = BeerListPresenter
     typealias Stubbing = __StubbingProxy_BeerListPresenter
     typealias Verification = __VerificationProxy_BeerListPresenter

    private var __defaultImplStub: BeerListPresenter?

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

     func enableDefaultImplementation(_ stub: BeerListPresenter) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }

    
    
    
     override var viewController: BeerListDisplayLogic? {
        get {
            return cuckoo_manager.getter("viewController",
                superclassCall:
                    
                    super.viewController
                    ,
                defaultCall: __defaultImplStub!.viewController)
        }
        
        set {
            cuckoo_manager.setter("viewController",
                value: newValue,
                superclassCall:
                    
                    super.viewController = newValue
                    ,
                defaultCall: __defaultImplStub!.viewController = newValue)
        }
        
    }
    

    

    
    
    
     override func presentBeers()  {
        
            return cuckoo_manager.call("presentBeers()",
                parameters: (),
                escapingParameters: (),
                superclassCall:
                    
                    super.presentBeers()
                    ,
                defaultCall: __defaultImplStub!.presentBeers())
        
    }
    
    
    
     override func presentBeerDetails()  {
        
            return cuckoo_manager.call("presentBeerDetails()",
                parameters: (),
                escapingParameters: (),
                superclassCall:
                    
                    super.presentBeerDetails()
                    ,
                defaultCall: __defaultImplStub!.presentBeerDetails())
        
    }
    
    
    
     override func presentError(error: Error, tryAgainAction: (()->())?)  {
        
            return cuckoo_manager.call("presentError(error: Error, tryAgainAction: (()->())?)",
                parameters: (error, tryAgainAction),
                escapingParameters: (error, tryAgainAction),
                superclassCall:
                    
                    super.presentError(error: error, tryAgainAction: tryAgainAction)
                    ,
                defaultCall: __defaultImplStub!.presentError(error: error, tryAgainAction: tryAgainAction))
        
    }
    

	 struct __StubbingProxy_BeerListPresenter: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    var viewController: Cuckoo.ClassToBeStubbedProperty<MockBeerListPresenter, BeerListDisplayLogic?> {
	        return .init(manager: cuckoo_manager, name: "viewController")
	    }
	    
	    
	    func presentBeers() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerListPresenter.self, method: "presentBeers()", parameterMatchers: matchers))
	    }
	    
	    func presentBeerDetails() -> Cuckoo.ClassStubNoReturnFunction<()> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerListPresenter.self, method: "presentBeerDetails()", parameterMatchers: matchers))
	    }
	    
	    func presentError<M1: Cuckoo.Matchable, M2: Cuckoo.Matchable>(error: M1, tryAgainAction: M2) -> Cuckoo.ClassStubNoReturnFunction<(Error, (()->())?)> where M1.MatchedType == Error, M2.MatchedType == (()->())? {
	        let matchers: [Cuckoo.ParameterMatcher<(Error, (()->())?)>] = [wrap(matchable: error) { $0.0 }, wrap(matchable: tryAgainAction) { $0.1 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerListPresenter.self, method: "presentError(error: Error, tryAgainAction: (()->())?)", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_BeerListPresenter: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    var viewController: Cuckoo.VerifyProperty<BeerListDisplayLogic?> {
	        return .init(manager: cuckoo_manager, name: "viewController", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func presentBeers() -> Cuckoo.__DoNotUse<Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentBeers()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentBeerDetails() -> Cuckoo.__DoNotUse<Void> {
	        let matchers: [Cuckoo.ParameterMatcher<Void>] = []
	        return cuckoo_manager.verify("presentBeerDetails()", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	    @discardableResult
	    func presentError<M1: Cuckoo.Matchable, M2: Cuckoo.Matchable>(error: M1, tryAgainAction: M2) -> Cuckoo.__DoNotUse<Void> where M1.MatchedType == Error, M2.MatchedType == (()->())? {
	        let matchers: [Cuckoo.ParameterMatcher<(Error, (()->())?)>] = [wrap(matchable: error) { $0.0 }, wrap(matchable: tryAgainAction) { $0.1 }]
	        return cuckoo_manager.verify("presentError(error: Error, tryAgainAction: (()->())?)", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}

}

 class BeerListPresenterStub: BeerListPresenter {
    
     override var viewController: BeerListDisplayLogic? {
        get {
            return DefaultValueRegistry.defaultValue(for: (BeerListDisplayLogic?).self)
        }
        
        set { }
        
    }
    

    

    
     override func presentBeers()  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
     override func presentBeerDetails()  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
     override func presentError(error: Error, tryAgainAction: (()->())?)  {
        return DefaultValueRegistry.defaultValue(for: Void.self)
    }
    
}


// MARK: - Mocks generated from file: uol-beer-app/Scenes/List/BeerListWorker.swift at 2019-04-12 23:59:26 +0000

//
//  BeerListWorker.swift
//  uol-beer-app
//
//  Created by Paulo Lourenço on 11/04/19.
//  Copyright (c) 2019 Paulo Lourenço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Cuckoo
@testable import uol_beer_app

import PromiseKit
import UIKit


 class MockBeerListWorker: BeerListWorker, Cuckoo.ClassMock {
     typealias MocksType = BeerListWorker
     typealias Stubbing = __StubbingProxy_BeerListWorker
     typealias Verification = __VerificationProxy_BeerListWorker

    private var __defaultImplStub: BeerListWorker?

     let cuckoo_manager = Cuckoo.MockManager.preconfiguredManager ?? Cuckoo.MockManager(hasParent: true)

     func enableDefaultImplementation(_ stub: BeerListWorker) {
        __defaultImplStub = stub
        cuckoo_manager.enableDefaultStubImplementation()
    }

    
    
    
     override var dataSource: BeerAPIDataSource {
        get {
            return cuckoo_manager.getter("dataSource",
                superclassCall:
                    
                    super.dataSource
                    ,
                defaultCall: __defaultImplStub!.dataSource)
        }
        
        set {
            cuckoo_manager.setter("dataSource",
                value: newValue,
                superclassCall:
                    
                    super.dataSource = newValue
                    ,
                defaultCall: __defaultImplStub!.dataSource = newValue)
        }
        
    }
    

    

    
    
    
     override func getBeers(page: Int?, itemsPerPage: Int?)  -> Promise<[Beer]> {
        
            return cuckoo_manager.call("getBeers(page: Int?, itemsPerPage: Int?) -> Promise<[Beer]>",
                parameters: (page, itemsPerPage),
                escapingParameters: (page, itemsPerPage),
                superclassCall:
                    
                    super.getBeers(page: page, itemsPerPage: itemsPerPage)
                    ,
                defaultCall: __defaultImplStub!.getBeers(page: page, itemsPerPage: itemsPerPage))
        
    }
    

	 struct __StubbingProxy_BeerListWorker: Cuckoo.StubbingProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	
	     init(manager: Cuckoo.MockManager) {
	        self.cuckoo_manager = manager
	    }
	    
	    var dataSource: Cuckoo.ClassToBeStubbedProperty<MockBeerListWorker, BeerAPIDataSource> {
	        return .init(manager: cuckoo_manager, name: "dataSource")
	    }
	    
	    
	    func getBeers<M1: Cuckoo.Matchable, M2: Cuckoo.Matchable>(page: M1, itemsPerPage: M2) -> Cuckoo.ClassStubFunction<(Int?, Int?), Promise<[Beer]>> where M1.MatchedType == Int?, M2.MatchedType == Int? {
	        let matchers: [Cuckoo.ParameterMatcher<(Int?, Int?)>] = [wrap(matchable: page) { $0.0 }, wrap(matchable: itemsPerPage) { $0.1 }]
	        return .init(stub: cuckoo_manager.createStub(for: MockBeerListWorker.self, method: "getBeers(page: Int?, itemsPerPage: Int?) -> Promise<[Beer]>", parameterMatchers: matchers))
	    }
	    
	}

	 struct __VerificationProxy_BeerListWorker: Cuckoo.VerificationProxy {
	    private let cuckoo_manager: Cuckoo.MockManager
	    private let callMatcher: Cuckoo.CallMatcher
	    private let sourceLocation: Cuckoo.SourceLocation
	
	     init(manager: Cuckoo.MockManager, callMatcher: Cuckoo.CallMatcher, sourceLocation: Cuckoo.SourceLocation) {
	        self.cuckoo_manager = manager
	        self.callMatcher = callMatcher
	        self.sourceLocation = sourceLocation
	    }
	
	    
	    var dataSource: Cuckoo.VerifyProperty<BeerAPIDataSource> {
	        return .init(manager: cuckoo_manager, name: "dataSource", callMatcher: callMatcher, sourceLocation: sourceLocation)
	    }
	    
	
	    
	    @discardableResult
	    func getBeers<M1: Cuckoo.Matchable, M2: Cuckoo.Matchable>(page: M1, itemsPerPage: M2) -> Cuckoo.__DoNotUse<Promise<[Beer]>> where M1.MatchedType == Int?, M2.MatchedType == Int? {
	        let matchers: [Cuckoo.ParameterMatcher<(Int?, Int?)>] = [wrap(matchable: page) { $0.0 }, wrap(matchable: itemsPerPage) { $0.1 }]
	        return cuckoo_manager.verify("getBeers(page: Int?, itemsPerPage: Int?) -> Promise<[Beer]>", callMatcher: callMatcher, parameterMatchers: matchers, sourceLocation: sourceLocation)
	    }
	    
	}

}

 class BeerListWorkerStub: BeerListWorker {
    
     override var dataSource: BeerAPIDataSource {
        get {
            return DefaultValueRegistry.defaultValue(for: (BeerAPIDataSource).self)
        }
        
        set { }
        
    }
    

    

    
     override func getBeers(page: Int?, itemsPerPage: Int?)  -> Promise<[Beer]> {
        return DefaultValueRegistry.defaultValue(for: Promise<[Beer]>.self)
    }
    
}

