//
//  BeerListInteractorTests.swift
//  uol-beer-app
//
//  Created by Paulo Lourenço on 12/04/19.
//  Copyright (c) 2019 Paulo Lourenço. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import uol_beer_app
@testable import PromiseKit
import XCTest
import Cuckoo

class BeerListInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: BeerListInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        PromiseKit.conf.Q.map = nil
        PromiseKit.conf.Q.return = nil
        sut = BeerListInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
        sut = nil
    }
    
    // MARK: Tests
    
    func testGetBeerListFirstPageSuccess() {
        let mockedWorker = BeerListWorker(dataSource: BeerAPIMock())
        let mockedPresenter = MockBeerListPresenter()
        
        stub(mockedPresenter) { (stub) in
            when(stub.presentBeers()).thenDoNothing()
        }
        
        sut.worker = mockedWorker
        sut.presenter = mockedPresenter
        
        sut.getBeerList(next: false)
        
        verify(mockedPresenter, times(1)).presentBeers()
    }
    
//    func testGetBeerListSecondPageSuccess() {
//        let mockedWorker = BeerListWorker(dataSource: BeerAPIMock())
//        let mockedPresenter = MockBeerListPresenter()
//
//        stub(mockedPresenter) { (stub) in
//            when(stub.presentBeers()).thenDoNothing()
//        }
//
//        sut.worker = mockedWorker
//        sut.presenter = mockedPresenter
//
//        sut.beersPerPage = 1
//        sut.canFetchMore = true
//        sut.beers = [Beer(name: "Teste", imageUrl: nil, abv: nil, ibu: nil, tagline: "teste", description: nil)]
//        sut.getBeerList(next: true)
//
//        verify(mockedPresenter, times(1)).presentBeers()
//
//    }
    
    func testGetBeerListZeroResults() {
        let mockedWorker = MockBeerListWorker(dataSource: BeerAPIMock())
        let mockedPresenter = MockBeerListPresenter()
        
        stub(mockedWorker) { (stub) in
            when(stub.getBeers(page: any(), itemsPerPage: any())).then({ (_,_) -> Promise<[Beer]> in
                return .value([])
            })
        }
        
        stub(mockedPresenter) { (stub) in
            when(stub.presentBeers()).thenDoNothing()
        }
        
        sut.worker = mockedWorker
        sut.presenter = mockedPresenter
        
        sut.getBeerList(next: true)
        
        verify(mockedPresenter, never()).presentBeers()
    }
    
    func testGetBeerListCantFetchMore() {
        let mockedWorker = MockBeerListWorker(dataSource: BeerAPIMock())
        let mockedPresenter = MockBeerListPresenter()
        
        stub(mockedWorker) { (stub) in
            when(stub.getBeers(page: any(), itemsPerPage: any())).thenCallRealImplementation()
        }
        
        stub(mockedPresenter) { (stub) in
            when(stub.presentBeers()).thenDoNothing()
        }
        
        sut.worker = mockedWorker
        sut.presenter = mockedPresenter
        
        sut.canFetchMore = false
        sut.getBeerList(next: true)
        
        verify(mockedPresenter, never()).presentBeers()
        verify(mockedWorker, never()).getBeers(page: any(), itemsPerPage: any())
    }
    
    func testGetBeerListError() {
        let mockedWorker = MockBeerListWorker(dataSource: BeerAPIMock())
        let mockedPresenter = MockBeerListPresenter()
        
        stub(mockedWorker) { (stub) in
            when(stub.getBeers(page: any(), itemsPerPage: any())).then({ (_,_) -> Promise<[Beer]> in
                return Promise<[Beer]> { seal in
                    seal.reject(APIClient.Errors.errorStatusCode(400))
                }
            })
        }
        
        stub(mockedPresenter) { (stub) in
            when(stub.presentBeers()).thenDoNothing()
            when(stub.presentError(error: any(), tryAgainAction: any())).thenDoNothing()
        }
        
        sut.worker = mockedWorker
        sut.presenter = mockedPresenter
        
        sut.getBeerList(next: false)
        
        verify(mockedPresenter, never()).presentBeers()
        verify(mockedWorker, times(1)).getBeers(page: any(), itemsPerPage: any())
        verify(mockedPresenter, times(1)).presentError(error: any(), tryAgainAction: any())
    }
    
    func testBeerSelection() {
        let mockedWorker = BeerListWorker(dataSource: BeerAPIMock())
        let mockedPresenter = MockBeerListPresenter()
        
        
        stub(mockedPresenter) { (stub) in
            when(stub.presentBeers()).thenDoNothing()
            when(stub.presentBeerDetails()).thenDoNothing()
        }
        
        sut.worker = mockedWorker
        sut.presenter = mockedPresenter
        
        sut.getBeerList(next: false)
        sut.selectBeer(index: 1)
        
        verify(mockedPresenter, times(1)).presentBeers()
        verify(mockedPresenter, times(1)).presentBeerDetails()
    }
    
}
